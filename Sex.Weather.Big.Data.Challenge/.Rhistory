#     #collect data from station
#     station.weather <- (lcd(station.id, year=2017), silent = TRUE)
#     if(typeof(lcd(station.id, year=2017))==typeof(US.Cities)){
#       break
#     }
#   }
#
#
#   station.weatherdata <- data.frame(date=station.weather$date,
#                                     latitude=station.weather$latitude,
#                                     longitude=station.weather$longitude,
#                                     name=station.weather$name,
#                                     temperature= station.weather$hourlydrybulbtemperature,
#                                     source= station.weather$source)
#
#   #file name
#   filename <- paste(US.Cities$name[i], "weather.csv",sep=".")
#
#   #create new dataset
#   write.csv(station.weatherdata, paste(path.data, paste(filename), sep=""),
#             row.names = FALSE)
# }
#
# #Still not working...UGGGGHHHHHHHHHHHHHHH
#
#----Attempt 4------------------------------------------------------------------------------------
#more ideas and fiddling around after 8 hours of work brought me to this,
#Attempt 3 was very close
for(i in 1:nrow(US.Cities)){
#Look up city
station <- isd_stations_search(lat=US.Cities$lat[i], lon = US.Cities$lng[i])
#a sub for loop to run through the different stations
for(y in 1:nrow(station)) {
#find city station
station.id <- paste(station$usaf[y],station$wban[y],sep="")
#collect data from station
station.weather <- try(lcd(station.id, year=2017), silent = TRUE)
#when station.weather is a list (not an error) move on
if(typeof(station.weather)==typeof(US.Cities)){
break
}
}
#specify the data that we want in the new data set
station.weatherdata <-
data.frame(date=station.weather$date,
latitude=station.weather$latitude,
longitude=station.weather$longitude,
name=station.weather$name,
temperature= station.weather$hourlydrybulbtemperature,
source= station.weather$source)
#file name
filename <- paste(US.Cities$name[i], "weather.csv", sep=".")
#create new dataset
write.csv(station.weatherdata, paste(path.data, paste(filename), sep=""),
row.names = FALSE)
}
df <- read.csv(paste(path.data,"Albany, NY.weather.csv", sep = ""),
stringsAsFactors = FALSE,
strip.white = TRUE,
na.strings = c(NA, ""))
fcsv.check.weather <- function(){       # function definition
weath.check <- rep(NA, 178)           # vector contains Boolean .csv presence
for(i in 1:length(big.cities$name)){  # loop checks .csv presence for cities
# populating vector w/ Boolean presence
csv.check[i] <- file.exists(paste(wd, "/data.output/",
as.character(big.cities[i,1]), ".weather",
".csv", sep = ""))
}
# which cities don't have a gtrends query .csv?
return(big.cities$name[which(csv.check == FALSE)])
}
# Running the function - do any cities not have a gtrends query .csv?
fcsv.check.weather()
fcsv.check.weather <- function(){       # function definition
csv.check <- rep(NA, 178)           # vector contains Boolean .csv presence
for(i in 1:length(big.cities$name)){  # loop checks .csv presence for cities
# populating vector w/ Boolean presence
csv.check[i] <- file.exists(paste(wd, "/data.output/",
as.character(big.cities[i,1]), ".weather",
".csv", sep = ""))
}
# which cities don't have a gtrends query .csv?
return(big.cities$name[which(weath.check == FALSE)])
}
# Running the function - do any cities not have a gtrends query .csv?
fcsv.check.weather()
fcsv.check.weather <- function(){       # function definition
csv.check <- rep(NA, 178)           # vector contains Boolean .csv presence
for(i in 1:length(big.cities$name)){  # loop checks .csv presence for cities
# populating vector w/ Boolean presence
csv.check[i] <- file.exists(paste(wd, "/data.output/",
as.character(big.cities[i,1]), ".weather",
".csv", sep = ""))
}
# which cities don't have a gtrends query .csv?
return(big.cities$name[which(csv.check == FALSE)])
}
# Running the function - do any cities not have a gtrends query .csv?
fcsv.check.weather()
fcsv.check.weather <- function(){       # function definition
csv.check <- rep(NA, 178)           # vector contains Boolean .csv presence
for(i in 1:length(big.cities$name)){  # loop checks .csv presence for cities
# populating vector w/ Boolean presence
csv.check[i] <- file.exists(paste(wd, "/data.output/",
as.character(big.cities[i,1]), ".weather",
".csv", sep = ""))
}
# which cities don't have a weather data .csv?
print("How many missing weather .csvs are there?")
return(big.cities$name[which(csv.check == FALSE)])
}
# Running the function - do any cities not have a gtrends query .csv?
fcsv.check.weather()
# execute the gtrends data download function
download.gtrends.data()
download.gtrends.data <- function(){
# loop to create .csv for first half of gtrends queries
for(i in 1:(length(big.cities$name)/2)){
# querying gtrends for first half of year and saving to object
first.6mo <- gtrends(geo = as.character(big.cities[i,3]), category = 1236,
time = "2018-01-01 2018-06-30", onlyInterest = TRUE)
# querying gtrends for second half of year and saving to object
second.6mo <- gtrends(geo = as.character(big.cities[i,3]), category = 1236,
time = "2018-07-01 2018-12-31", onlyInterest = TRUE)
# combining first and second half to get whole year interest over time
iot <- rbind(first.6mo$interest_over_time, second.6mo$interest_over_time)
# saving combined interest over time to .csv
write.csv(iot, paste(wd, "/data.output/", as.character(big.cities[i,1]),
".gtrends", ".csv", sep = ""))
}  # end of loop
# loop to create .csv for second half of gtrends queries
for(i in (length(big.cities$name)/2):length(big.cities$name)){
# querying gtrends for first half of year and saving to object
first.6mo <- gtrends(geo = as.character(big.cities[i,3]), category = 1236,
time = "2018-01-01 2018-06-30", onlyInterest = TRUE)
# querying gtrends for second half of year and saving to object
second.6mo <- gtrends(geo = as.character(big.cities[i,3]), category = 1236,
time = "2018-07-01 2018-12-31", onlyInterest = TRUE)
# combining first and second half to get whole year interest over time
iot <- rbind(first.6mo$interest_over_time, second.6mo$interest_over_time)
# saving combined interest over time to .csv
write.csv(iot, paste(wd, "/data.output/", as.character(big.cities[i,1]),
".gtrends", ".csv", sep = ""))
}  # end of loop
# checking presence of gtrend .csvs
fcsv.check.gtrend <- function(){      # function definition
csv.check <- rep(NA, 178)             # vector contains Boolean .csv presence
for(i in 1:length(big.cities$name)){  # loop checks .csv presence for each city
# populating vector w/ Boolean presence
csv.check[i] <- file.exists(paste(wd, "/data.output/",
as.character(big.cities[i,1]), ".gtrends",
".csv", sep = ""))
}
# which cities don't have a gtrends query .csv?
print("Are there any missing gtrends query .csvs?")
return(big.cities$name[which(csv.check == FALSE)])
}
# Running the function - do any cities not have a gtrends query .csv?
fcsv.check.gtrend()
}  # end of gtrends query download function
# execute the gtrends data download function
download.gtrends.data()
download.weather.data <- function(){
for(i in 1:nrow(big.cities)){
# look up stations within a city
station <- isd_stations_search(lat = big.cities$lat[i],
lon = big.cities$lng[i])
# a sub for loop to run through the different stations within each city
# looks until it finds one that's available
for(y in 1:nrow(station)) {
#find city station
station.id <- paste(station$usaf[y],station$wban[y],sep = "")
#collect data from station
station.weather <- try(lcd(station.id, year = 2017), silent = TRUE)
#when station.weather is a list (not an error) move on
if(typeof(station.weather) == typeof(big.cities)){
break
}  # end of if statement
}    # end of station-checking sub-lopp
# specify the data that we want to download for the station
station.weatherdata <-
data.frame(date=station.weather$date,
latitude = station.weather$latitude,
longitude = station.weather$longitude,
name = station.weather$name,
temperature = station.weather$hourlydrybulbtemperature,
source = station.weather$source)
# define file name
filename <- paste(big.cities$name[i], "weather.csv", sep = ".")
# save downloaded weather data to .csv
write.csv(station.weatherdata, paste(path.data, paste(filename), sep = ""),
row.names = FALSE)
}  # fin
# checking presence of weather .csvs
fcsv.check.weather <- function(){       # function definition
csv.check <- rep(NA, 178)           # vector contains Boolean .csv presence
for(i in 1:length(big.cities$name)){  # loop checks .csv presence for cities
# populating vector w/ Boolean presence
csv.check[i] <- file.exists(paste(wd, "/data.output/",
as.character(big.cities[i,1]), ".weather",
".csv", sep = ""))
}
# which cities don't have a weather data .csv?
print("Are there any missing weather data .csvs?")
return(big.cities$name[which(csv.check == FALSE)])
}
# Running the function - do any cities not have a gtrends query .csv?
fcsv.check.weather()
}  # end of weather data download function
# execute the weather data download function
download.gtrends.data()
<<<<<<< HEAD
wd <- getwd()
=======
#
#
#==== General ==================================================================
#
# This file contains code that pertains to the following aspects of the
# sex-weather project:
#
# 1. File Management
# 2. Libraries
# 3. Global Variables
# 4. Run Custom Codes
#
#
R.version.string
# "R version 3.6.2 (2019-12-12)"
sessionInfo()  # for more info
#==== 1. Libraries==============================================================
# libraries contain specific functions and they come in many shapaes an forms
# library("name of package")
library(rnoaa)
library(gtrendsR)
library(dplyr)
>>>>>>> e9f4280892beea952e7695cc98f0b4713d4a1bcc
# if you don't have the library yet, install it! Either through the 'Tools' menu
# or install.packages("name of package")
#======== 2. File Management ===================================================
# working directory
wd <- getwd()
# names of folders for output data (figures,data output,data)
# store names of the folders in an object
output.folder.names <- c("figures", "data.output")
# and make the folders if they don't exit yet. No need to understand this now
for(i in 1:length(output.folder.names))
if(file.exists(output.folder.names[i]) == FALSE)
dir.create(output.folder.names[i])
#path to data folder
path.data <- paste(wd,"/",output.folder.names[2],"/", sep = "")
<<<<<<< HEAD
#Example of posting to the datafolder
write.csv(output.folder.names, paste(path.data, "uselessnames.csv"),
row.names = FALSE)
=======
>>>>>>> e9f4280892beea952e7695cc98f0b4713d4a1bcc
#===== 3. Global Variables =====================================================
countries <- gtrendsR::countries
categories <- gtrendsR::categories
# from: https://simplemaps.com/data/us-cities
cities <- read.csv("cities.csv",
stringsAsFactors = FALSE,
strip.white = TRUE,
na.strings = c(NA, ""))
# removing with populations under 50,000
big.cities <- subset(cities, Population > 50000)
# What is the category id for sexual enhancement?
se <- categories$id[categories$name == "Sexual Enhancement"]
# [1] "1236"
#============================ 4. Run Custom Codes ==============================
#============================ End of Main ======================================
# for(i in 1:length(big.cities$name)){
weath <- read.csv(paste(path.data, as.character(city.name), ".weather.csv",
sep = ""),
stringsAsFactors = FALSE,
strip.white = TRUE,
na.strings = c(NA, ""))
# for(i in 1:length(big.cities$name)){
weath <- read.csv(paste(path.data, big.cities$name[i], ".weather.csv",
sep = ""),
stringsAsFactors = FALSE,
strip.white = TRUE,
na.strings = c(NA, ""))
gtrend <- read.csv(paste(path.data, big.cities$name[i], ".gtrends.csv",
sep = ""),
stringsAsFactors = FALSE,
strip.white = TRUE,
na.strings = c(NA, ""))
# reducing date and time to just date for weather data
weath$ymd <- substr(df$date, 1, 10)
type(weath)
class(weath)
# reducing date and time to just date for weather data
weath$ymd <- substr(weath$date, 1, 10)
# names for each day of the year in weather dataset
dates <- unique(weath$ymd)
daily.temp <- rep(NA, 365)
for( i in 1:length(unique(df$ymd))){
dates <- unique(weath$ymd)
daily.temp[i] <- mean(df$temperature[weath$ymd == dates[i]], na.rm = TRUE)
}  # end of daily temperature loop
daily.temp <- rep(NA, 365)
for( i in 1:length(unique(df$ymd))){
dates <- unique(weath$ymd)
daily.temp[i] <- mean(weath$temperature[weath$ymd == dates[i]], na.rm = TRUE)
}  # end of daily temperature loop
daily.temp <- rep(NA, 365)
for( i in 1:length(unique(weath$ymd))){
dates <- unique(weath$ymd)
daily.temp[i] <- mean(weath$temperature[weath$ymd == dates[i]], na.rm = TRUE)
}  # end of daily temperature loop
warnings()
daily.temp
daily.temp <- rep(NA, 365)
for( i in 1:length(unique(weath$ymd))){
dates <- unique(weath$ymd)
daily.temp[i] <- mean(weath$temperature[weath$ymd == dates[i]], na.rm = TRUE)
}  # end of daily temperature loop
daily.temp
length(unique(weath$ymd)
length(unique(weath$ymd))
dates
weath$temperature[weath$ymd == dates[i]]
daily.temp <- rep(NA, 365)
for(y in 1:length(unique(weath$ymd))){
daily.temp[y] <- mean(weath$temperature[weath$ymd == dates[y]],
na.rm = TRUE)
}  # end of daily temperature loop
daily.temp
y <- 1
weath$temperature[weath$ymd == dates[y]]
mean(weath$temperature[weath$ymd == dates[y]],
na.rm = TRUE)
?mean
weath$temperature[weath$ymd == dates[y]]
mean(weath$temperature[weath$ymd == dates[y]],
na.rm = TRUE)
mean(as.numeric(weath$temperature[weath$ymd == dates[y]]),
na.rm = TRUE)
weath$temperature[weath$ymd == dates[y]]
daily.temp[y] <- mean(as.numeric(weath$temperature[weath$ymd == dates[y]]),
na.rm = TRUE)
daily.temp
rm(y)
daily.temp <- rep(NA, 365)
for(y in 1:length(unique(weath$ymd))){
daily.temp[y] <- mean(as.numeric(weath$temperature[weath$ymd == dates[y]]),
na.rm = TRUE)
}  # end of daily temperature loop
daily.temp
gtrend.weath <- data.frame("date" = weath$ymd, "gtrend.hits" = gtrend$hits,
temperature = daily.temp)
# combine gtrends and weather data by day of year
gtrend.weath <- data.frame("date" = dates, "gtrend.hits" = gtrend$hits,
temperature = daily.temp)
gtrend.weath
gtrend$hits
gtrend
plot(gtrend.weath$gtrend.hits ~ gtrend.weath$temperature)
plot(gtrend.weath[gtrend.weath$gtrend.hits > 0] ~ gtrend.weath$temperature)
plot(gtrend.weath$gtrend.hits[gtrend.weath$gtrend.hits > 0] ~ gtrend.weath$temperature)
plot(gtrend.weath$gtrend.hits[gtrend.weath$gtrend.hits > 0] ~
gtrend.weath$temperature[gtrend.weath$gtrend.hits > 0])
plot(gtrend.weath$gtrend.hits[gtrend.weath$gtrend.hits > 0] ~
gtrend.weath$date[gtrend.weath$gtrend.hits > 0])
#path to figures folder
path.figures <- paste(wd,"/",output.folder.names[1],"/", sep = "")
rm(i)
for(i in 1:length(big.cities$name)){
weath <- read.csv(paste(path.data, big.cities$name[i], ".weather.csv",
sep = ""),
stringsAsFactors = FALSE,
strip.white = TRUE,
na.strings = c(NA, ""))
gtrend <- read.csv(paste(path.data, big.cities$name[i], ".gtrends.csv",
sep = ""),
stringsAsFactors = FALSE,
strip.white = TRUE,
na.strings = c(NA, ""))
# reducing date and time to just date for weather data
weath$ymd <- substr(weath$date, 1, 10)
# names for each day of the year in weather dataset
dates <- unique(weath$ymd)
# this loop creates a vector with the mean temperature for each day of the year
daily.temp <- rep(NA, 365)
for(y in 1:length(unique(weath$ymd))){
daily.temp[y] <- mean(as.numeric(weath$temperature[weath$ymd == dates[y]]),
na.rm = TRUE)
}  # end of daily temperature loop
# combine gtrends and weather data by day of year
gtrend.weath <- data.frame("date" = dates, "gtrend.hits" = gtrend$hits,
temperature = daily.temp)
filename <- paste(big.cities$name[i], "comparison.csv", sep = ".")
# start saving of pdf
pdf(paste(path.figures, paste(filename), sep = ""),
width = 5, height = 5)
plot(gtrend.weath$gtrend.hits[gtrend.weath$gtrend.hits > 0] ~
gtrend.weath$temperature[gtrend.weath$gtrend.hits > 0])
# stop saving
dev.off()
# is the file really there?
file.exists(paste(wd, "/clim.figs/squam.rainfall.pdf", sep = ""))
}  # end of comparison loop
warnings()
dates
gtrend$hits
daily.temp
for(i in 1:length(big.cities$name)){
weath <- read.csv(paste(path.data, big.cities$name[i], ".weather.csv",
sep = ""),
stringsAsFactors = FALSE,
strip.white = TRUE,
na.strings = c(NA, ""))
gtrend <- read.csv(paste(path.data, big.cities$name[i], ".gtrends.csv",
sep = ""),
stringsAsFactors = FALSE,
strip.white = TRUE,
na.strings = c(NA, ""))
# reducing date and time to just date for weather data
weath$ymd <- substr(weath$date, 1, 10)
# names for each day of the year in weather dataset
dates <- unique(weath$ymd)
# this loop creates a vector with the mean temperature for each day of the year
daily.temp <- rep(NA, 365)
for(y in 1:length(unique(weath$ymd))){
daily.temp[y] <- mean(as.numeric(weath$temperature[weath$ymd == dates[y]]),
na.rm = TRUE)
}  # end of daily temperature loop
# combine gtrends and weather data by day of year
gtrend.weath <- data.frame("date" = dates, "gtrend.hits" = gtrend$hits,
temperature = daily.temp)
filename <- paste(big.cities$name[i], "comparison.pdf", sep = ".")
# start saving of pdf
pdf(paste(path.figures, paste(filename), sep = ""),
width = 5, height = 5)
plot(gtrend.weath$gtrend.hits[gtrend.weath$gtrend.hits > 0] ~
gtrend.weath$temperature[gtrend.weath$gtrend.hits > 0])
# stop saving
dev.off()
}  # end of comparison loop
for(i in 1:length(big.cities$name)){
weath <- read.csv(paste(path.data, big.cities$name[i], ".weather.csv",
sep = ""),
stringsAsFactors = FALSE,
strip.white = TRUE,
na.strings = c(NA, ""))
gtrend <- read.csv(paste(path.data, big.cities$name[i], ".gtrends.csv",
sep = ""),
stringsAsFactors = FALSE,
strip.white = TRUE,
na.strings = c(NA, ""))
# reducing date and time to just date for weather data
weath$ymd <- substr(weath$date, 1, 10)
# names for each day of the year in weather dataset
dates <- unique(weath$ymd)
# this loop creates a vector with the mean temperature for each day of the year
daily.temp <- rep(NA, 365)
for(y in 1:length(unique(weath$ymd))){
daily.temp[y] <- mean(as.numeric(weath$temperature[weath$ymd == dates[y]]),
na.rm = TRUE)
}  # end of daily temperature loop
# combine gtrends and weather data by day of year
gtrend.weath <- data.frame("date" = dates, "gtrend.hits" = gtrend$hits,
temperature = daily.temp)
filename <- paste(big.cities$name[i], "comparison.pdf", sep = ".")
# start saving of pdf
pdf(paste(path.figures, paste(filename), sep = ""),
width = 5, height = 5)
plot(gtrend.weath$gtrend.hits[gtrend.weath$gtrend.hits > 0] ~
gtrend.weath$temperature[gtrend.weath$gtrend.hits > 0],
xlab = "Temperature", ylab = "Hits",
main = "Google Searches for Sexual Enhancement")
# stop saving
dev.off()
}  # end of comparison loop
for(i in 1:length(big.cities$name)){
weath <- read.csv(paste(path.data, big.cities$name[i], ".weather.csv",
sep = ""),
stringsAsFactors = FALSE,
strip.white = TRUE,
na.strings = c(NA, ""))
gtrend <- read.csv(paste(path.data, big.cities$name[i], ".gtrends.csv",
sep = ""),
stringsAsFactors = FALSE,
strip.white = TRUE,
na.strings = c(NA, ""))
# reducing date and time to just date for weather data
weath$ymd <- substr(weath$date, 1, 10)
# names for each day of the year in weather dataset
dates <- unique(weath$ymd)
# this loop creates a vector with the mean temperature for each day of the year
daily.temp <- rep(NA, 365)
for(y in 1:length(unique(weath$ymd))){
daily.temp[y] <- mean(as.numeric(weath$temperature[weath$ymd == dates[y]]),
na.rm = TRUE)
}  # end of daily temperature loop
# combine gtrends and weather data by day of year
gtrend.weath <- data.frame("date" = dates, "gtrend.hits" = gtrend$hits,
temperature = daily.temp)
filename <- paste(big.cities$name[i], "comparison.pdf", sep = ".")
# start saving of pdf
pdf(paste(path.figures, paste(filename), sep = ""),
width = 5, height = 5)
plot(gtrend.weath$gtrend.hits[gtrend.weath$gtrend.hits > 0] ~
gtrend.weath$temperature[gtrend.weath$gtrend.hits > 0],
xlab = "Temperature", ylab = "Hits",
main = "Google Searches for Sexual Enhancement")
# stop saving
dev.off()
}  # end of comparison loop
daily.temp
